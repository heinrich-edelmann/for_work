sample_mean <- 25
population_mean <- 22
sample_size <- 50
population_sd <- 5
# Load the stats package
library(stats)
# Perform the Z-test
result <- z.test(x = sample_mean, sigma = population_sd, n = sample_size, mu = population_mean, alternative = "two.sided")
# Set up the data
successes <- 25
trials <- 50
# Perform the Z-test for proportions
result <- prop.test(successes, trials, p = 0.5, alternative = "two.sided")
# View the test results
summary(result)
# Set up the data
sample_mean <- 25
sample_size <- 50
population_mean <- 22
population_sd <- 5
# Perform the Z-test for means
result <- t.test(x = sample_mean, alternative = "two.sided", mu = population_mean, sigma = population_sd/sqrt(sample_size))
# View the test results
summary(result)# Load the ggplot2 package
library(ggplot2)
# Create a data frame for plotting
plot_data <- data.frame(x = c(population_mean - 3 * (population_sd / sqrt(sample_size)), population_mean + 3 * (population_sd / sqrt(sample_size))),
y = c(0, 0))
# Create the plot
ggplot(plot_data, aes(x = x, y = y)) +
geom_segment(aes(xend = x, yend = y + 1), color = "blue", size = 2) +
geom_vline(xintercept = sample_mean, color = "red", linetype = "dashed") +
labs(title = "Z-Test Result",
x = "Sample Mean",
y = "Probability Density") +
annotate("text", x = population_mean, y = 1.5, label = "Population Mean") +
annotate("text", x = sample_mean, y = 1.5, label = "Sample Mean") +
theme_minimal()
GeomCircle <- ggproto("GeomCircle", Geom,
draw_panel = function(data, panel_params, coord) {
# Expand x, y, radius data to points along circle
circle_data <- Map(function(x, y, r) {
radians <- seq(0, 2*pi, length.out = 101)[-1]
data.frame(
x = cos(radians) * r + x,
y = sin(radians) * r + y
)
}, x = data$x, y = data$y, r = data$radius)
circle_data <- do.call(rbind, circle_data)
# Transform to viewport coords
circle_data <- coord$transform(circle_data, panel_params)
# Draw as grob
grid::polygonGrob(
x = circle_data$x,
y = circle_data$y,
id.lengths = rep(100, nrow(data)),
default.units = "native",
gp = grid::gpar(
col = data$colour,
fill = data$fill,
# Use linewidth or fall back to size in old ggplot2 versions
lwd = (data$linewidth %||% data$size) * .pt,
lty = data$linetype
)
)
},
required_aes = c("x", "y", "radius"),
default_aes = aes(
colour = "black",
fill = "grey",
# Switch size to linewidth
linewidth = 0.5,
linetype = 1,
alpha = NA
),
draw_key = draw_key_polygon,
# To allow using size in ggplot2 < 3.4.0
non_missing_aes = "size",
# Tell ggplot2 to perform automatic renaming
rename_size = TRUE
)
ggplot(random_points) +
geom_circle(aes(x = x, y = y, radius = radius, size = value))
install.packages("ggplot")
install.packages("ggplot2")
# Load the ggplot2 package
library(ggplot2)
# Create a data frame for plotting
plot_data <- data.frame(x = c(population_mean - 3 * (population_sd / sqrt(sample_size)), population_mean + 3 * (population_sd / sqrt(sample_size))),
y = c(0, 0))
# Create the plot
ggplot(plot_data, aes(x = x, y = y)) +
geom_segment(aes(xend = x, yend = y + 1), color = "blue", size = 2) +
geom_vline(xintercept = sample_mean, color = "red", linetype = "dashed") +
labs(title = "Z-Test Result",
x = "Sample Mean",
y = "Probability Density") +
annotate("text", x = population_mean, y = 1.5, label = "Population Mean") +
annotate("text", x = sample_mean, y = 1.5, label = "Sample Mean") +
theme_minimal()
# Load the ggplot2 package
library(ggplot2)
# Create a data frame for plotting
plot_data <- data.frame(x = c(population_mean - 3 * (population_sd / sqrt(sample_size)), population_mean + 3 * (population_sd / sqrt(sample_size))),
y = c(0, 0))
# Create the plot
ggplot(plot_data, aes(x = x, y = y)) +
geom_segment(aes(xend = x, yend = y + 1), color = "blue", size = 2) +
geom_vline(xintercept = sample_mean, color = "red", linetype = "dashed") +
labs(title = "Z-Test Result",
x = "Sample Mean",
y = "Probability Density") +
annotate("text", x = population_mean, y = 1.5, label = "Population Mean") +
annotate("text", x = sample_mean, y = 1.5, label = "Sample Mean") +
theme_minimal()
# Load the ggplot2 package
library(ggplot2)
# Create a scatter plot using the mtcars dataset
ggplot(mtcars, aes(x = hp, y = mpg)) +
geom_point() +
labs(title = "Scatter Plot of Horsepower vs. MPG",
x = "Horsepower",
y = "MPG")
# Install and load the knitr package
install.packages("knitr")
library(knitr)
# Create a data frame
data <- data.frame(
Name = c("John", "Alice", "Michael"),
Age = c(25, 30, 28),
City = c("New York", "London", "Paris")
)
# Generate a table using knitr
kable(data)
> plot_data <- data.frame(x = c(population_mean - 3 * (population_sd / sqrt(sample_size)), population_mean + 3 * (population_sd / sqrt(sample_size))),
+                         y = c(0, 0))
> plot_data <- data.frame(x = c(population_mean - 3 * (population_sd / sqrt(sample_size)), population_mean + 3 * (population_sd / sqrt(sample_size))),
plot_data <- data.frame(x = c(population_mean - 3 * (population_sd / sqrt(sample_size)), population_mean + 3 * (population_sd / sqrt(sample_size))),
+                         y = c(0, 0))
plot_data <- data.frame(x = c(population_mean - 3 * (population_sd / sqrt(sample_size)), population_mean + 3 * (population_sd / sqrt(sample_size))),
y = c(0, 0))
kable(plot_data)
q()
df1 <- read.table("partks.txt")
setwd("C:/Users/hhhme/Documents/GitHub/for_work/learning R/importacao_Dataframes")
df1 <- read.table("partks.txt")
df1
View(df1)
# pra abrir arquivo csv
df2 <- read.csv("mola.csv")
df2
summary(df2)
df3 <- read.csv("questoes.csv")
View(df3)
View(df3)
library(readxl)
R.version.string
# installing/loading the package:
if(!require(installr)) {
install.packages("installr");
require(installr)
} #load / install+load installr
updateR()
